<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Don Allison]]></title>
  <link href="http://doneallison.github.io/atom.xml" rel="self"/>
  <link href="http://doneallison.github.io/"/>
  <updated>2014-12-21T14:47:25-05:00</updated>
  <id>http://doneallison.github.io/</id>
  <author>
    <name><![CDATA[Don Allison]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging JavaScript]]></title>
    <link href="http://doneallison.github.io/blog/2014/11/17/debugging-javascript/"/>
    <updated>2014-11-17T23:29:52-05:00</updated>
    <id>http://doneallison.github.io/blog/2014/11/17/debugging-javascript</id>
    <content type="html"><![CDATA[<h2>The Problem</h2>

<p>Ever since my class at <a href="http://flatironschool.com/">The Flatiron School</a> took a detour into JavaScript from Ruby and Rails, I&rsquo;ve found it harder to debug my code. I think this has happened for a couple of reasons. First, JavaScript has a fussier syntax than Ruby, and, as a beginner, I don&rsquo;t always know where to put my semicolons, curly braces, <code>var</code> keywords, etc. Second, JavaScript is highly permissive, and, as a result, its error messages tend to be less helpful than those of Ruby. Take, for example, the following Ruby code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">arg1</span> <span class="o">+</span> <span class="n">arg2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="s2">&quot;Hello world!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If I type this into irb, I get the following error message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ArgumentError</span><span class="p">:</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">from</span> <span class="p">(</span><span class="n">irb</span><span class="p">):</span><span class="mi">1</span><span class="ss">:in</span> <span class="sb">`my_method&#39;</span>
</span><span class='line'><span class="sb"> from (irb):5</span>
</span><span class='line'><span class="sb"> from /Users/don/.rvm/rubies/ruby-2.1.2/bin/irb:11:in `</span><span class="o">&lt;</span><span class="n">main</span><span class="o">&gt;</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a helpful error message. It tells me that I supplied the wrong number of arguments when I called <code>my_method</code> in line 5. Specifically, I supplied one argument where <code>my_method</code> requires two.</p>

<p>Contrast this with the equivalent in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(</span><span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">arg1</span> <span class="o">+</span> <span class="nx">arg2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myFunc</span><span class="p">(</span><span class="s2">&quot;Hello world!&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I run this code, I don&rsquo;t get an error message. Instead, I get:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="s2">&quot;hello worldundefined&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Huh?</p>

<p>As I wrote above, JavaScript is very permissive. If there&rsquo;s any way JavaScript can make do with what the programmer provides, JavaScript tries to do it. In this case, it simply inserted the default value <code>undefined</code> in place of the argument I failed to supply.</p>

<p>This aspect of JavaScript gives it the potential to be highly expressive, but it also complicates things for JavaScript novices. Once JavaScript programs become even mildly complex, small errors like the one above can easily break programs, and JavaScript does not offer much help in diagnosing the problem. At best, it supplies a cryptic error message like <code>'undefined' is not a function</code>; at worst, it cheerfully returns <code>undefined</code>, as though everything went according to plan.</p>

<p>Given these (seeming) issues, I decided to research tools that could help me debug my JavaScript code.</p>

<h2>Solutions</h2>

<h3>Syntax</h3>

<p>As I mentioned above, I think JavaScript&rsquo;s fussy syntax is one of the things that makes it difficult to debug. Especially for beginners, it&rsquo;s easy to break programs by mistakenly omitting a semicolon or committing some other seemingly minor transgression. Fortunately, this problem turns out to have an easy fix: <a href="http://jshint.com/">JSHint</a>. JSHint is a multi-platform tool that identifies syntax errors and other code quality issues in JavaScript code. Their web interface works quite well for casual experimentation, but their Sublime Text plugin (also available for <a href="http://www.jshint.com/install/">other platforms</a>) is more practical for day-to-day use. Here&rsquo;s how I installed it (for Sublime Text 3):</p>

<ol>
<li><strong><a href="https://sublime.wbond.net/installation">Install Package Control</a></strong>, which makes it easy to add and remove Sublime Text packages.

<ul>
<li>Copy the appropriate block of Python code from the <a href="https://sublime.wbond.net/installation">Package Control installation page</a></li>
<li>Switch from your web browser to Sublime Text</li>
<li>Press <code>ctrl + `</code> to bring up the Sublime Text console</li>
<li>Paste the Python code into the console and press enter</li>
<li>Restart Sublime Text</li>
</ul>
</li>
<li><strong><a href="http://sublimelinter.readthedocs.org/en/latest/installation.html">Install SublimeLinter</a></strong>, a framework for language-specific packages that <a href="http://en.wikipedia.org/wiki/Lint_(software">lint</a> code within Sublime Text.

<ul>
<li>In Sublime Text, press <code>command + shift + p</code> to bring up the command palette</li>
<li>Begin typing &ldquo;Package Control: Install Package&rdquo;, and select that option once it&rsquo;s visible</li>
<li>Begin typing &ldquo;SublimeLinter&rdquo;, and select that option once it&rsquo;s visible</li>
<li>Restart Sublime Text</li>
</ul>
</li>
<li><strong><a href="http://nodejs.org/">Install Node.js</a></strong>, a run-time environment for JavaScript. The easiest way is to click &ldquo;Install&rdquo; button on the homepage and then follow the installer&rsquo;s instructions.</li>
<li><strong><a href="http://jshint.com/">Install JSHint</a></strong> for Node.js using npm (Node Package Manager).

<ul>
<li>Open Terminal and type <code>npm install -g jshint</code> (the -g flag makes JSHint available &ldquo;globally&rdquo; - i.e., in all directories on your computer)</li>
<li>If this fails (as it did on my computer), issue the same command with elevated permissions: <code>sudo npm install -g jshint</code></li>
</ul>
</li>
<li><strong><a href="https://github.com/SublimeLinter/SublimeLinter-jshint">Install SublimeLinter-jshint</a></strong>, which allows SublimeLinter to work with JavaScript code.

<ul>
<li>In Sublime Text, press <code>command + shift + p</code> to bring up the command palette</li>
<li>Begin typing &ldquo;Package Control: Install Package&rdquo;, and select that option once it&rsquo;s visible</li>
<li>Begin typing &ldquo;SublimeLinter-jshint&rdquo;, and select that option once it&rsquo;s visible</li>
<li>Restart Sublime Text</li>
</ul>
</li>
</ol>


<p>After completing these steps, SublimeLinter-jshint should automatically point out JavaScript syntax errors in Sublime Text.</p>

<h3>Debugging</h3>

<p>Having eliminated one class of errors (syntax errors), I turned my attention to finding JavaScript equivalents of <a href="http://en.wikipedia.org/wiki/Interactive_Ruby_Shell">irb</a>, a command-line tool that makes it easy to test fragments of Ruby code, and <a href="https://github.com/pry/pry/wiki">pry</a>, a tool that allows programmers to step through Ruby code at specified breakpoints in a program.</p>

<h4>Replacing irb</h4>

<p>irb is the easier of the two tools to replace. Most Mac users probably already have two tools installed that provide similar functionality.</p>

<h5>jsc</h5>

<p>The first is <strong><a href="https://trac.webkit.org/wiki/JSC">jsc</a></strong>, which provides an irb-like interface in the terminal. It actually comes pre-installed on OS X, although it&rsquo;s not in your path by default. To add it to your path, simply open Terminal and run the following command from any directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="nx">sudo</span> <span class="nx">ln</span> <span class="o">-</span><span class="nx">s</span> <span class="o">/</span><span class="nx">System</span><span class="o">/</span><span class="nx">Library</span><span class="o">/</span><span class="nx">Frameworks</span><span class="o">/</span><span class="nx">JavaScriptCore</span><span class="p">.</span><span class="nx">framework</span><span class="o">/</span><span class="nx">Versions</span><span class="o">/</span><span class="nx">Current</span><span class="o">/</span><span class="nx">Resources</span><span class="o">/</span><span class="nx">jsc</span> <span class="o">/</span><span class="nx">bin</span><span class="o">/</span><span class="nx">jsc</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you can launch jsc by typing <code>jsc</code> in Terminal. jsc is good for investigating small JavaScript quirks (e.g., what does <code>typeof(null)</code> return?), but in my experience it doesn&rsquo;t accept multi-line blocks with the same ease as irb. As a result, you can&rsquo;t simply copy your code from a text editor and run it in jsc. This makes it a non-ideal replacement for irb.</p>

<h5>Chrome DevTools</h5>

<p>Fortunately, many Mac users already have another JavaScript tool installed that handles multi-line pasting with ease: <a href="https://developer.chrome.com/devtools">Chrome DevTools</a>, &ldquo;a set of web authoring and debugging tools built into Google Chrome.&rdquo; DevTools can be launched by pressing <code>command + option + j</code> from within Google Chrome.</p>

<p><img class="center" src="http://doneallison.github.io/images/debugging-javascript_chromedevtools.png"></p>

<p>Chrome DevTools are amazing, and I&rsquo;m confident I&rsquo;ll find myself using them more as I gain experience. As a novice, however, they feel mildly like overkill in situations when I simply want to test a single function or chunk of code. In addition, using DevTools for small tests requires me to copy code from my text editor and paste it into DevTools (or else edit my code directly in DevTools, missing out on JSHint, syntax highlighting, and other Sublime Text goodness). This takes time and can introduce additional errors (e.g., forgetting to copy a variable declaration that is relied upon in the code I do copy). For these reasons, I decided to look for something simpler.</p>

<h5>Creating a JavaScript Console in Sublime Text</h5>

<p>I ended up finding the answer on <a href="http://www.wikihow.com/Create-a-Javascript-Console-in-Sublime-Text">wikihow.com</a>, of all places. In the article, user Anson S describes a process for writing a Sublime Text plugin that uses Node.js (which we installed earlier) to build and run JavaScript code directly in Sublime Text. Assuming you already have Node.js installed, the process is actually pretty simple:</p>

<ol>
<li><p>Go to <code>Tools &gt; Build System &gt; New Build System...</code> in Sublime Text 3 (this may or may not work in Sublime Text 2).</p></li>
<li><p>In the new tab opened by Sublime Text, paste the following code:
     <code>
     {
     "cmd": ["node", "$file"],
     "selector": "source.js"
     }
    </code></p></li>
<li><p>Press <code>ctrl + s</code> and save the file as <code>node.sublime-build</code> in the folder that Sublime Text brings up by default.</p></li>
</ol>


<p>Then, when you have a JavaScript file open in Sublime Text and want to run it, you can just press <code>command + b</code>. (If this doesn&rsquo;t work, make sure the sublime-build you just created is selected by going to <code>Tools &gt; Build System</code> and selecting <code>node</code>). Sublime Text will build the code using Node.js and then display the result in a small window at the bottom of the editor.</p>

<p><img class="center" src="http://doneallison.github.io/images/debugging-javascript_js_console_in_sublime_text.png"></p>

<h4>Replacing pry</h4>

<p>As far as I&rsquo;ve been able to tell, replacing pry is a bit more difficult than replacing irb. The best tool I&rsquo;ve come across is in - surprise! - DevTools, specifically under the <code>Sources</code> tab. If you open DevTools on a page with the script you want to inspect, you can use the <code>Sources</code> tab to step through and debug the code. As in pry, this allows you to pause execution at specified breakpoints in a program and investigate the environment, including, e.g., the current values of all variables in scope. The main drawback of this function of DevTools is that it&rsquo;s somewhat annoying to get a one-off script (i.e., a script not yet integrated into a minimally functioning webpage) loaded into the tool. As far as I can tell, you can&rsquo;t just open a local file and use the tool on it.</p>

<p>There is a kind of hacky way to sidestep this issue: simply save your JavaScript program as an HTML file, and then enclose all of the JavaScript code between <code>&lt;script&gt;</code> tags:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">myFunc</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">test1</span> <span class="o">=</span> <span class="s2">&quot;Hello world!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">debugger</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">test2</span> <span class="o">=</span> <span class="s2">&quot;Goodbye world!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myFunc</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, you can open the file in Chrome, press <code>command + option + j</code> to open DevTools, click on the <code>Sources</code> tab, and press <code>command + r</code> to refresh and inspect your code.</p>

<p><img class="center" src="http://doneallison.github.io/images/debugging-javascript_devtools_sources.png"></p>

<p>In this example, we can see that the <code>debugger</code> statement acts as a breakpoint - code execution is paused, and we can examine the current state of each variable under the &ldquo;Scope Variables&rdquo; window. Right now, <code>test1</code> has a value of &ldquo;Hello world!&rdquo;, but <code>test2</code> is still <code>undefined</code> because the <code>debugger</code> statement paused code execution. If we click twice the button to step into the next function call&hellip;</p>

<p><img class="center" src="http://doneallison.github.io/images/debugging-javascript_devtools_sources_button.png"></p>

<p>&hellip;we&rsquo;ll see that <code>test2</code> is now assigned the value of <code>"Goodbye world!"</code>.</p>

<p><img class="center" src="http://doneallison.github.io/images/debugging-javascript_devtools_sources_2.png"></p>

<p>If you don&rsquo;t like inserting <code>debugger</code> statements into your code, you can also create a breakpoint by clicking the left margin of the center pane in the DevTools debugger, which will create a blue arrow indicating a breakpoint at the line selected.</p>

<p>Eventually, I&rsquo;d like to encapsulate this process into a Sublime Text plugin that, when prompted with an appropriate keyboard shortcut, automatically wraps a <code>*.js</code> file being edited in HTML and launches it in a browser for debugging. For now, though, the manual strategy should save me some frustration!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Web App: Topicana]]></title>
    <link href="http://doneallison.github.io/blog/2014/11/03/my-first-web-app-topicana/"/>
    <updated>2014-11-03T23:57:35-05:00</updated>
    <id>http://doneallison.github.io/blog/2014/11/03/my-first-web-app-topicana</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>After writing my <a href="http://doneallison.com/blog/2014/10/20/topic-modeling-my-text-messages/">last post</a>, I wanted to explore topic modeling and the <a href="http://mallet.cs.umass.edu/">MAchine Learning for LanguagE Toolkit (MALLET)</a> a bit further. Specifically, I wanted to explore the possibility of liberating MALLET from several usability issues:</p>

<ul>
<li><p><strong>Preparing Data</strong>: It takes a long time to convert source documents into a format that MALLET can understand and analyze, and the transformations are amenable to automation.</p></li>
<li><p><strong>Environment Setup</strong>: Setting up MALLET to work properly can be a fussy process, especially for Windows users.</p></li>
<li><p><strong>Clunky CLI</strong>: Although MALLET does have an independently developed <a href="https://code.google.com/p/topic-modeling-tool/">GUI</a>, most people interact with MALLET through its somewhat clunky CLI. For certain advanced features, the CLI is the only way to interact with MALLET.</p></li>
<li><p><strong>Files, files, and more files</strong>: The only output MALLET provides are large text files that are difficult to evaluate quickly and intuitively. As a result, many users end up importing MALLET output files into Excel <em>every time</em> they train a topic model in order to evaluate the suitability of the model. This long feedback cycle aligns poorly with the iterative, intuitive process required to identify a good topic model.</p></li>
</ul>


<p>Since I had been learning Sinatra at <a href="http://flatironschool.com/">The Flatiron School</a>, I decided to try coding a simple, incomplete solution to these problems. Being a sucker for puns, I called that solution <a href="https://topicana.herokuapp.com/">Topicana</a>.</p>

<h2>A Brief Introduction to Topicana</h2>

<p>Topicana is a simple web form that allows users to extract topics from collections of documents. Users can either provide their own documents (in the form of plaintext or URLs) or ask Topicana to retrieve documents based on keywords. Topicana also allows users to choose whether to enable <a href="http://en.wikipedia.org/wiki/Hyperparameter_optimization">hyperparameter optimization</a> and <a href="http://en.wikipedia.org/wiki/Stop_words">stopword removal</a>.</p>

<p>When a user submits a query, Topicana processes the documents provided into MALLET&rsquo;s internal format and then navigates the MALLET CLI to train a topic model based on those documents and other parameters provided by the user. Once MALLET finishes training the topic model, Topicana converts its raw output into simple tables. One table shows the top keywords in each topic identified, while multiple tables show the topic composition of each article provided to Topicana.</p>

<p>Although Topicana is based on and ultimately reducible to MALLET, it relies on several technologies to automate the tasks of retrieving, parsing, and preparing inputs and formatting and displaying outputs:</p>

<ul>
<li><p><strong>Nokogiri</strong>: Nokogiri parses content retrieved from URLs entered by users.</p></li>
<li><p><strong><a href="https://webhose.io/">webhose.io</a></strong>: At the moment, Topicana uses webhose.io to retrieve content relevant to keywords provided by users. In the future, I&rsquo;ll consider other services such as the <a href="https://developers.google.com/custom-search/json-api/v1/overview">Google Custom Search API</a>, the <a href="https://datamarket.azure.com/dataset/8818F55E-2FE5-4CE3-A617-0B8BA8419F65">Bing Web Search API</a>, and the <a href="http://www.faroo.com/hp/api/api.html">Faroo Free Search API</a> (1,000,000 free transactions each month!), which require a bit more configuration.</p></li>
<li><p><strong>Sinatra</strong>: Sinatra is a lightweight alternative to heavier frameworks like Rails.</p></li>
<li><p><strong>Heroku</strong>: Heroku is a service that allows push-button deployment of web apps directly from Git. After a small amount of setup, you can deploy to Heroku by typing <code>git push heroku master</code> from the command line. Amazing!</p></li>
</ul>


<h2>Next Steps</h2>

<p>Although Topicana is very basic and still unstable, I was excited to get a proof of concept working. I think algorithms based on topic modeling have the potential to help researchers and others navigate, organize, and consume information more efficiently. In the future, I can imagine extending Topicana in a number of ways:</p>

<ul>
<li><p><strong>Improve Stability and Scalability</strong>: Right now, Topicana is kind of shaky on Heroku - sometimes it works, sometimes it doesn&rsquo;t. I suspect at least part of the problem is that I haven&rsquo;t yet implemented background processes, which means that all the text processing takes place within a single request/response cycle. That&rsquo;s frankly pretty nutty and would be one of the first things I&rsquo;d want to fix. I&rsquo;d also want to experiment with different APIs to find the best source from which to fetch content.</p></li>
<li><p><strong>Add Persistence</strong>: Topicana does not currently remember anything from one request to the next. I&rsquo;d like for users to be able to save past searches and perhaps to look at them side-by-side with current searches. I think this could help users determine the sort of model that works best for their data.</p></li>
<li><p><strong>Improve Appearance/UI</strong>: Topicana does not even have basic CSS yet, and I&rsquo;d at least like to add some basic styling.</p></li>
<li><p><strong>Easy File Import</strong>: Eventually, I&rsquo;d like Topicana to have the ability to directly ingest mixed collections of DOC, TXT, PDF, and other files. I&rsquo;d also like to write a Chrome extension or bookmarklet that users can push to save a page for later processing.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topic Modeling My Text Messages]]></title>
    <link href="http://doneallison.github.io/blog/2014/10/20/topic-modeling-my-text-messages/"/>
    <updated>2014-10-20T07:48:26-04:00</updated>
    <id>http://doneallison.github.io/blog/2014/10/20/topic-modeling-my-text-messages</id>
    <content type="html"><![CDATA[<p>Today marks exactly one year since my lovely girlfriend and I began dating. In honor of that occasion (and inspired by posts from <a href="http://blog.kanaabe.com/blog/2014/10/16/the-nokogiri-saw/">Kana Abe</a> and <a href="http://adashofdata.com/2014/10/14/how-text-messages-change-from-dating-to-marriage/">Alice Zhao</a>), I decided to try building a <a href="http://en.wikipedia.org/wiki/Topic_model">topic model</a> of all the text messages we&rsquo;ve sent to each other using <a href="https://www.google.com/settings/takeout">Google Takeout</a>, Ruby, <a href="http://www.nokogiri.org/">Nokogiri</a> (an HTML parser), and <a href="http://mallet.cs.umass.edu/">MALLET</a> (a Java-based command line program for natural language processing). The idea was that I might be able to extract some insight about what we&rsquo;ve been talking about during our relationship and how it has changed over time, much like Professor Robert K. Nelson did for the Civil War in his project <a href="http://dsl.richmond.edu/dispatch/">Mining the Dispatch</a>.</p>

<h3>Step One: Download Texts from Google Takeout</h3>

<p>Since I use Google Voice for texting, my first step was to head over to <a href="https://www.google.com/settings/takeout">Google Takeout</a> and download an archive of our texts. Google Takeout is a great feature that allows you to export data from most Google services, including Gmail, Calendar, Contacts, and Hangouts. For this project, however, I was only interested in texts, so I left all boxes unchecked except for Google Voice.</p>

<p>A few minutes later, I received a download link to a ZIP archive of all my Google Voice data. I unpacked the archive and found two files and two folders.</p>

<ul>
<li><strong>Bills.html</strong>: An HTML-format page detailing my Google Voice credit purchase history</li>
<li><strong>Phones.vcf</strong>: A <a href="http://en.wikipedia.org/wiki/VCard">vCard</a>-format archive of my Google Voice contacts</li>
<li><strong>Greetings</strong>: A folder containing an mp3-format copy of my customized voicemail greeting</li>
<li><strong>Calls</strong>: A folder containing HTML-format pages with details about all my calls and texts</li>
</ul>


<p>For the purposes of this project, all I needed was the <strong>Calls</strong> folder. Since the texts themselves were somewhat oddly embedded in 246 HTML files that held as many as 100 texts each, my next step was to parse the HTML files. Enter Nokogiri&hellip;</p>

<h3>Step Two: Extract Text Messages from Archive</h3>

<p><a href="http://www.nokogiri.org/">Nokogiri</a> is a Ruby gem that makes it easy to parse HTML and XML files into usable Ruby objects. In order to use it, I created a new Ruby file called <code>topic-modeling-texts.rb</code> and typed <code>require 'nokogiri'</code> on the first line. This code lets the Ruby interpreter know that it should load the files needed to make Nokogiri run.</p>

<p>Next, I looped through the <strong>Calls</strong> folder and built an array of individual text messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">messages</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="s2">&quot;Voice/Calls/&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Text&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;5555551234&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">file</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Jane Doe&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="n">current_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;Voice/Calls/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">page_to_parse</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">current_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current_file</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>    <span class="n">page_to_parse</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s2">&quot;div.message q&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="n">messages</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, I first create a <code>messages</code> array and set it equal to an empty array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">messages</span> <span class="o">=</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, I loop through the <code>Voice/Calls/</code> directory and look for files that include the word &ldquo;Text&rdquo; and my girlfriend&rsquo;s name or phone number (name and number changed to protect the innocent!).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="s2">&quot;Voice/Calls/&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Text&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;5555551234&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="n">file</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Jane Doe&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, I open each matching file, assign it to a variable called <code>page_to_parse</code>, and tell Nokogiri to treat the object as HTML.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">current_file</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;Voice/Calls/</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">page_to_parse</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">current_file</span><span class="p">)</span>
</span><span class='line'><span class="n">current_file</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the magic happens: Nokogiri&rsquo;s CSS selectors automagically extract all the content between <code>&lt;q&gt;</code> tags in the <code>message</code> class (where the text messages happened to be stored in the HTML pages I downloaded from Google Takeout) and shovel each text message into my <code>messages</code> array.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">page_to_parse</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s2">&quot;div.message q&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">messages</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This left me with a nice array of 10,404 text messages. The next challenge was to convert those text messages into a format that MALLET understands.</p>

<h3>Step Three: Preparing the Text Messages for MALLET</h3>

<p>According to <a href="http://mallet.cs.umass.edu/import.php">MALLET&rsquo;s website</a>, users can provide input to the program in two ways:</p>

<ul>
<li>In a single text file, with each line corresponding to a different &ldquo;document&rdquo;</li>
<li>In multiple text files in a single directory, with each file corresponding to a different &ldquo;document&rdquo;</li>
</ul>


<p>Since I was dealing with a large number of &ldquo;documents&rdquo; (text messages), I decided it would be simpler to go with the first option. Back to Ruby!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;mallet-2.0.7/texts.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;w+&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">messages</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">message</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">index</span><span class="si">}</span><span class="s2"> texts </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this code, I create a new text file called <code>texts.txt</code> in the same directory as the MALLET program files. Then, I iterate through the <code>messages</code> array and write each element to a new line in <code>texts.txt</code>, with an index number and the word &ldquo;texts&rdquo; appended to the front.</p>

<p>For example, a single line in <code>texts.txt</code> might read &ldquo;83 texts How are you today?&rdquo; MALLET requires the &ldquo;83 texts&rdquo; part because it needs an &ldquo;instance name&rdquo; (in this case, 83) and a &ldquo;label&rdquo; (in all these cases, &ldquo;texts&rdquo;) to use in its output files. MALLET construes the remainder of each line as the actual content.</p>

<p>Once I had my <code>texts.txt</code> files prepared, it was time to fire up Terminal and begin interacting with MALLET.</p>

<h3>Step Four: Processing the Text Messages in MALLET</h3>

<p>After <a href="http://mallet.cs.umass.edu/download.php">installing MALLET</a>, my first step in interacting with the program was to navigate to its directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">mallet</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, I had to import my <code>texts.txt</code> file and convert it into a form that MALLET can handle. I did this with the <code>import-file</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">mallet</span> <span class="n">import</span><span class="o">-</span><span class="n">file</span> <span class="o">--</span><span class="n">input</span> <span class="n">texts</span><span class="o">.</span><span class="n">txt</span> <span class="o">--</span><span class="n">output</span> <span class="n">texts</span><span class="o">.</span><span class="n">mallet</span> <span class="o">--</span><span class="n">keep</span><span class="o">-</span><span class="n">sequence</span> <span class="o">--</span><span class="n">remove</span><span class="o">-</span><span class="n">stopwords</span>
</span></code></pre></td></tr></table></div></figure>


<p>This command has several parameters:</p>

<ul>
<li><code>--input</code> specifies the input file, <code>texts.txt</code></li>
<li><code>--output</code> specifies the output file, <code>texts.mallet</code></li>
<li>According to the MALLET website, <code>--keep-sequence</code> &ldquo;preserves the document as a sequence of word features, rather than a vector of word feature counts.&rdquo; I don&rsquo;t really know what this means, but MALLET yelled at me when I tried to use a file imported without this parameter, so in it went!</li>
<li><code>--remove-stopwords</code> filters the input file and removes common words, like &ldquo;a,&rdquo; &ldquo;an,&rdquo; &ldquo;the,&rdquo; etc. This helps filter noise from the model.</li>
</ul>


<p>After running the command, I ended up with a <code>texts.mallet</code> file, and I was ready to generate some models. I did this with the <code>train-topics</code> command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">mallet</span> <span class="n">train</span><span class="o">-</span><span class="n">topics</span> <span class="o">--</span><span class="n">input</span> <span class="n">texts</span><span class="o">.</span><span class="n">mallet</span> <span class="o">--</span><span class="n">num</span><span class="o">-</span><span class="n">topics</span> <span class="mi">25</span> <span class="o">--</span><span class="n">output</span><span class="o">-</span><span class="n">state</span> <span class="n">texts</span><span class="o">-</span><span class="n">state</span><span class="o">.</span><span class="n">gz</span> <span class="o">--</span><span class="n">output</span><span class="o">-</span><span class="n">topic</span><span class="o">-</span><span class="n">keys</span> <span class="n">texts_keys</span><span class="o">.</span><span class="n">txt</span> <span class="o">--</span><span class="n">output</span><span class="o">-</span><span class="n">doc</span><span class="o">-</span><span class="n">topics</span> <span class="n">texts_compostion</span><span class="o">.</span><span class="n">txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this command includes several parameters:</p>

<ul>
<li><code>--input</code> specifies the input file</li>
<li><code>--num-topics</code> specifies the number of topics MALLET should train. Which number is appropriate depends upon the input material. If the number 5 is used for a highly diverse set of documents, the resulting topics will be overly general and unlikely to correspond to well-defined real-world topics. By contrast, if the number 50 is used for a highly uniform set of documents, then MALLET will search for topics that aren&rsquo;t there and return a lot of &ldquo;false positives&rdquo; (topics that do not correspond to anything in the real world). I went with 25 for the initial run based entirely on gut feeling.</li>
<li><code>--output-state</code> specifies the file in which MALLET should store a compressed text file containing all words in all documents along with their assignments to specific topics</li>
<li><code>--output-topic-keys</code> specifies the file in which MALLET should store a text file that lists the top words for each topic</li>
<li><code>--output-doc-topics</code> specifies the file in which MALLET should store a text file that describes the topic composition of each input document</li>
</ul>


<p>I ran this command several times using different numbers for the <code>num-topics</code> parameter until the keywords looked like they aligned reasonably well with real world topics.</p>

<h3>Step Five: A Brief Analysis</h3>

<p>In the end, 25 topics seemed to provide a decent balance between generality and specificity. In looking at the key words identified in the <code>text-keys.txt</code> file, I can see several topics that could plausibly correspond to real-world concepts. Here are the top words for a few sample topics:</p>

<ul>
<li><strong>Career</strong>: job school project team deloitte offer business high axiom company opportunity booz market afraid entire higher role firm consulting</li>
<li><strong>Plans with Friends</strong>: people weekend travel agree friend making asked plans question forgot taylor made talked discuss questions friends apt date</li>
<li><strong>Everyday Planning and Coordination</strong>: home back dinner call meet leave email place thinking eat leaving hey work food coming late office hour</li>
<li><strong>Travel</strong>: bus interview sunday saturday afternoon dc monday ny prep care st city evening side airport uh final dryer ticket</li>
<li><strong>Budgeting and Investing</strong>: number message basically books account service text texts suit costs gvoice takes silly lot homeless ira transfer set</li>
<li><strong>Sharing Links</strong>: http www html amazon dp utm uber mobile youtube pe ref medium em articles nytimes utf ho strangers apps</li>
</ul>


<p>In order to get these results, I ended up including another parameter called &ldquo;hyperparameter optimization,&rdquo; which allows some topics to be more prominent than others and thus sometimes improves results.</p>

<h3>Conclusions</h3>

<p>Although I had fun reliving the first year of my relationship through a computational lens, I think text messages are ultimately poorly suited to topic modeling. Having used MALLET in the past, I know the software achieves more compelling results with content like newspaper articles. My speculations about why that might be is perhaps a topic for another post!</p>
]]></content>
  </entry>
  
</feed>
